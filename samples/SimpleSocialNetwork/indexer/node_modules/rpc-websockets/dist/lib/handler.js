"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.messages = exports.callRPC = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Parses JSON-RPC 2.0 messages and sends responses.
 * @param {String} data - message data
 * @param {String} ns - namespace
 * @return {Object}
 */
var messages = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(data, ns) {
        var msg_options,
            responses,
            _iteratorNormalCompletion,
            _didIteratorError,
            _iteratorError,
            _iterator,
            _step,
            message,
            _response,
            response,
            args,
            i,
            _args = arguments;

        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        (0, _assertArgs2.default)(_args, {
                            "data": "string",
                            "[ns]": "string"
                        });

                        msg_options = {};


                        if (data instanceof ArrayBuffer) {
                            msg_options.binary = true;
                            data = Buffer.from(data).toString();
                        }

                        _context.prev = 3;
                        data = _circularJson2.default.parse(data);_context.next = 11;
                        break;

                    case 7:
                        _context.prev = 7;
                        _context.t0 = _context["catch"](3);

                        if (data.method) {
                            this.socket.send((0, _stringify2.default)({
                                jsonrpc: "2.0",
                                error: utils.createError(-32700, _context.t0.toString()),
                                id: data.id || null
                            }, msg_options));
                        }

                        return _context.abrupt("return");

                    case 11:
                        if (!data.method) {
                            _context.next = 57;
                            break;
                        }

                        if (!Array.isArray(data)) {
                            _context.next = 49;
                            break;
                        }

                        if (data.length) {
                            _context.next = 15;
                            break;
                        }

                        return _context.abrupt("return", this.socket.send((0, _stringify2.default)({
                            jsonrpc: "2.0",
                            error: utils.createError(-32600, "Invalid array"),
                            id: null
                        }, msg_options)));

                    case 15:
                        responses = [];
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context.prev = 19;
                        _iterator = (0, _getIterator3.default)(data);

                    case 21:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context.next = 32;
                            break;
                        }

                        message = _step.value;
                        _context.next = 25;
                        return this._runMethod(message, this.socket._id, ns);

                    case 25:
                        _response = _context.sent;

                        if (_response) {
                            _context.next = 28;
                            break;
                        }

                        return _context.abrupt("continue", 29);

                    case 28:

                        responses.push(_response);

                    case 29:
                        _iteratorNormalCompletion = true;
                        _context.next = 21;
                        break;

                    case 32:
                        _context.next = 38;
                        break;

                    case 34:
                        _context.prev = 34;
                        _context.t1 = _context["catch"](19);
                        _didIteratorError = true;
                        _iteratorError = _context.t1;

                    case 38:
                        _context.prev = 38;
                        _context.prev = 39;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }

                    case 41:
                        _context.prev = 41;

                        if (!_didIteratorError) {
                            _context.next = 44;
                            break;
                        }

                        throw _iteratorError;

                    case 44:
                        return _context.finish(41);

                    case 45:
                        return _context.finish(38);

                    case 46:
                        if (responses.length) {
                            _context.next = 48;
                            break;
                        }

                        return _context.abrupt("return");

                    case 48:
                        return _context.abrupt("return", this.socket.send(_circularJson2.default.stringify(responses), msg_options));

                    case 49:
                        _context.next = 51;
                        return this._runMethod(data, this.socket._id, ns);

                    case 51:
                        response = _context.sent;

                        if (response) {
                            _context.next = 54;
                            break;
                        }

                        return _context.abrupt("return");

                    case 54:
                        return _context.abrupt("return", this.socket.send(_circularJson2.default.stringify(response), msg_options));

                    case 57:
                        if (!(data.result || data.error || data.notification)) {
                            _context.next = 75;
                            break;
                        }

                        if (!(data.notification && this.listeners(data.notification).length)) {
                            _context.next = 64;
                            break;
                        }

                        if ((0, _keys2.default)(data.params).length) {
                            _context.next = 61;
                            break;
                        }

                        return _context.abrupt("return", this.emit(data.notification));

                    case 61:
                        args = [data.notification];


                        if (data.params.constructor === Object) args.push(data.params);else
                            // using for-loop instead of unshift/spread because performance is better
                            for (i = 0; i < data.params.length; i++) {
                                args.push(data.params[i]);
                            }return _context.abrupt("return", this.emit.apply(this, args));

                    case 64:
                        if (this.queue[data.id]) {
                            _context.next = 70;
                            break;
                        }

                        if (!(data.method && data.params)) {
                            _context.next = 69;
                            break;
                        }

                        return _context.abrupt("return", this.emit(data.method, data.params));

                    case 69:
                        return _context.abrupt("return");

                    case 70:

                        if (this.queue[data.id].timeout) clearTimeout(this.queue[data.id].timeout);

                        if (data.error) this.queue[data.id].promise[1](data.error);else this.queue[data.id].promise[0](data.result);

                        this.queue[data.id] = null;
                        _context.next = 76;
                        break;

                    case 75:
                        console.log("TODO: this is a fail");

                    case 76:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, this, [[3, 7], [19, 34, 38, 46], [39,, 41, 45]]);
    }));

    return function messages(_x, _x2) {
        return _ref.apply(this, arguments);
    };
}();

/**
 * Calls JSON-RPC 2.0 methods via WebSockets.
 * @param {String} data - message data
 * @param {String} ns - namespace
 * @return {Object}
 */


var callRPC = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                    case "end":
                        return _context2.stop();
                }
            }
        }, _callee2, this);
    }));

    return function callRPC() {
        return _ref2.apply(this, arguments);
    };
}();

var _assertArgs = require("assert-args");

var _assertArgs2 = _interopRequireDefault(_assertArgs);

var _circularJson = require("circular-json");

var _circularJson2 = _interopRequireDefault(_circularJson);

var _utils = require("./utils");

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.callRPC = callRPC;
exports.messages = messages;